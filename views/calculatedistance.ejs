<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Fetch Published Rides</title>
  </head>
  <body>
    <ul id="distances-list"></ul>
    <!-- Your HTML content here -->

    <script>
      // Modified fetch code to fetch published rides and log them to the console
      fetch("/fetchPublishedRides")
        .then((response) => response.json())
        .then((publishedRides) => {
          console.log("Published Rides:", publishedRides);

          // Get user's location using HTML Geolocation API
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
              (position) => {
                const userLatitude = position.coords.latitude;
                const userLongitude = position.coords.longitude;
                console.log(userLatitude, userLongitude);
                // Array to store distances for each ride
                const distancesList = [];

                // Calculate distance between user's location and each published ride's location
                publishedRides.forEach((ride) => {
                  const rideLatitude = parseFloat(
                    ride.coordinates.split(",")[1]
                  );
                  const rideLongitude = parseFloat(
                    ride.coordinates.split(",")[0]
                  );
                  const distance = calculateDistance(
                    userLatitude,
                    userLongitude,
                    rideLatitude,
                    rideLongitude
                  );
                  console.log("Distance to ride:", distance, "km");

                  // Store the distance for each ride
                  distancesList.push({ rideId: ride._id, distance });
                });

                // Display distances on the web page
                displayDistances(distancesList);

                // Send the distances data to the server
                sendDistancesToServer(distancesList);
              },
              (error) => {
                console.error("Error getting user location:", error);
              }
            );
          } else {
            console.error("Geolocation is not supported by this browser.");
          }
        })
        .catch((error) =>
          console.error("Error fetching published rides:", error)
        );

      // Function to calculate distance between two points using Haversine formula
      // function calculateDistance(lat1, lon1, lat2, lon2) {
      //   const R = 6371; // Radius of the Earth in kilometers
      //   const dLat = deg2rad(lat2 - lat1);
      //   const dLon = deg2rad(lon2 - lon1);
      //   const a =
      //     Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      //     Math.cos(deg2rad(lat1)) *
      //       Math.cos(deg2rad(lat2)) *
      //       Math.sin(dLon / 2) *
      //       Math.sin(dLon / 2);
      //   const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      //   const distance = R * c; // Distance in kilometers
      //   return distance;
      // }

      // // Function to convert degrees to radians
      // function deg2rad(deg) {
      //   return deg * (Math.PI / 180);
      // }
      function calculateDistance(lat1, lon1, lat2, lon2, radius = 6371) {
      const R = radius; // Earth's radius in kilometers
      const dLat = (Math.PI * (lat2 - lat1)) / 180; // Convert degrees to radians
      const dLon = (Math.PI * (lon2 - lon1)) / 180;
      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(Math.PI * lat1 / 180) * Math.cos(Math.PI * lat2 / 180) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c;
      return distance;
}

// Example usage
// const latitude1 = 36.12; // Nashville, US
// const longitude1 = -86.67;
// const latitude2 = 33.94; // Los Angeles, US
// const longitude2 = -118.40;

    const distance = calculateDistance(lat1, lon1, lat2, lon2);
    console.log(`The distance between Nashville and Los Angeles is approximately ${distance.toFixed(2)} kilometers.`);

      // Function to display distances on the web page
      function displayDistances(distancesList) {
        // Get the distances list element
        const distancesListElement = document.getElementById("distances-list");

        // Clear previous content
        distancesListElement.innerHTML = "";

        // Append distances to the list
        distancesList.forEach((item) => {
          const listItem = document.createElement("li");
          listItem.textContent = `Ride ID: ${item.rideId}, Distance: ${item.distance} km`;
          distancesListElement.appendChild(listItem);
        });
      }

      // Function to send distances data to the server
      function sendDistancesToServer(distancesList) {
        fetch("/calculateDistances", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ distances: distancesList }), // Send the distances data to the server
        })
          .then((response) => response.json())
          .then((data) => {
            console.log("Distances data sent to server:", data);
          })
          .catch((error) =>
            console.error("Error sending distances data to server:", error)
          );
      }
    </script>
  </body>
</html>
